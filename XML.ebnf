document          = prolog element Misc* - Char* RestrictedChar Char*
Char              = [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */
RestrictedChar    = [#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]
S                 = (#x20 | #x9 | #xD | #xA)+
NameStartChar     ::= ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
NameChar          ::= NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
Name              ::= NameStartChar (NameChar)*
Names             ::= Name (#x20 Name)*
Nmtoken           ::= (NameChar)+
Nmtokens          ::= Nmtoken (#x20 Nmtoken)*
EntityValue       ::= '"' ([^%&"] | PEReference | Reference)* '"' | "'" ([^%&'] | PEReference | Reference)* "'"
AttValue          ::= '"' ([^<&"] | Reference)* '"' | "'" ([^<&'] | Reference)* "'"
SystemLiteral     ::= ('"' [^"]* '"') | ("'" [^']* "'")
PubidLiteral      ::= '"' PubidChar* '"' | "'" (PubidChar - "'")* "'"
PubidChar         ::= #x20 | #xD | #xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]
CharData          ::= [^<&]* - ([^<&]* ']]>' [^<&]*)
Comment           ::= '<!--' ((Char - '-') | ('-' (Char - '-')))* '-->'
PI                ::= '<?' PITarget (S (Char* - (Char* '?>' Char*)))? '?>'
PITarget          ::= Name - (('X' | 'x') ('M' | 'm') ('L' | 'l'))
CDSect            ::= CDStart CData CDEnd
CDStart           ::= '<![CDATA['
CData             ::= (Char* - (Char* ']]>' Char*))
CDEnd             ::= ']]>'
prolog            ::= XMLDecl Misc* (doctypedecl Misc*)?
XMLDecl           ::= '<?xml' VersionInfo EncodingDecl? SDDecl? S?'?>'
VersionInfo       ::= S 'version' Eq ("'" VersionNum "'" | '"' VersionNum '"')
Eq                ::= S? '=' S?
VersionNum        ::= '1.1'
Misc              ::= Comment | PI | S
[28]  doctypedecl       ::= '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>'
[28a] DeclSep           ::= PEReference | S
[28b] intSubset         ::= (markupdecl | DeclSep)*
[29]  markupdecl        ::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment
[30]  extSubset         ::= TextDecl? extSubsetDecl
[31]  extSubsetDecl     ::= ( markupdecl | conditionalSect | DeclSep)*
[32]  SDDecl            ::= #x20+ 'standalone' Eq (("'" ('yes' | 'no') "'") | ('"' ('yes' | 'no') '"'))
(Productions 33 through 38 have been removed.)
[39]  element           ::= EmptyElemTag
[40]  STag              ::= '<' Name (S Attribute)* S? '>'
[41]  Attribute         ::= Name Eq AttValue
[42]  ETag              ::= '</' Name S? '>'
[43]  content           ::= CharData? ((element | Reference | CDSect | PI | Comment) CharData?)*
[44]  EmptyElemTag      ::= '<' Name (S Attribute)* S? '/>'
[45]  elementdecl       ::= '<!ELEMENT' S Name S contentspec S? '>'
[46]  contentspec       ::= 'EMPTY' | 'ANY' | Mixed | children
[47]  children          ::= (choice | seq) ('?' | '*' | '+')?
[48]  cp                ::= (Name | choice | seq) ('?' | '*' | '+')?
[49]  choice            ::= '(' S? cp ( S? '|' S? cp )+ S? ')'
[50]  seq               ::= '(' S? cp ( S? ',' S? cp )* S? ')'
[51]  Mixed             ::= '(' S? '#PCDATA' (S? '|' S? Name)* S? ')*' | '(' S? '#PCDATA' S? ')'
[52]  AttlistDecl       ::= '<!ATTLIST' S Name AttDef* S? '>'
[53]  AttDef            ::= S Name S AttType S DefaultDecl
[54]  AttType           ::= StringType | TokenizedType | EnumeratedType
[55]  StringType        ::= 'CDATA'
[56]  TokenizedType     ::= 'ID' | 'IDREF' | 'IDREFS' | 'ENTITY' | 'ENTITIES' | 'NMTOKEN' | 'NMTOKENS'
[57]  EnumeratedType    ::= NotationType | Enumeration
[58]  NotationType      ::= 'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')'
[59]  Enumeration       ::= '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')'
[60]  DefaultDecl       ::= '#REQUIRED' | '#IMPLIED' | (('#FIXED' S)? AttValue)
[61]  conditionalSect   ::= includeSect | ignoreSect
[62]  includeSect       ::= '<![' S? 'INCLUDE' S? '[' extSubsetDecl ']]>'
[63]  ignoreSect        ::= '<![' S? 'IGNORE' S? '[' ignoreSectContents* ']]>'
ignoreSectContents::= Ignore ('<![' ignoreSectContents ']]>' Ignore)*
Ignore            ::= Char* - (Char* ('<![' | ']]>') Char*)
CharRef           ::= '&#' [0-9]+ ';' | '&#x' [0-9a-fA-F]+ ';'
Reference         ::= EntityRef | CharRef
EntityRef         ::= '&' Name ';'
PEReference       ::= '%' Name ';'
EntityDecl        ::= GEDecl | PEDecl
GEDecl            ::= '<!ENTITY' S Name S EntityDef S? '>'
PEDecl            ::= '<!ENTITY' S '%' S Name S PEDef S? '>'
EntityDef         ::= EntityValue| (ExternalID NDataDecl?)
PEDef             ::= EntityValue | ExternalID
ExternalID        ::= 'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral
NDataDecl         ::= S 'NDATA' S Name
TextDecl          ::= '<?xml' VersionInfo? EncodingDecl S? '?>'
extParsedEnt      ::= TextDecl? content - Char* RestrictedChar Char*
EncodingDecl      ::= S 'encoding' Eq ('"' EncName '"' | "'" EncName "'" )
EncName           ::= [A-Za-z] ([A-Za-z0-9._] | '-')*
NotationDecl      ::= '<!NOTATION' S Name S (ExternalID | PublicID) S? '>'
PublicID          ::= 'PUBLIC' S PubidLiteral